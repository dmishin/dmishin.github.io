// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function() {
  var Array2d, BaseMouseTool, BufferPane, ButtonGroup, Cells, DelayedHandler, DomBuilder, E, FieldView, GhostClickDetector, GolApplication, LibraryPane, MargolusNeighborehoodField, NamedRules, Point, Rule2Name, Rules, SpaceshipCatcher, ToolDraw, ToolEraser, ToolSelect, ToolStamp, Transforms, addClass, addDelayedListener, cap, div, drawPatternOnCanvas, fill_rules, getCanvasCursorPosition, getDualTransform, getReadableFileSizeString, idOrNull, line_pixels, loadExternalCSS, makeElement, mod, nodefault, parseUri, parse_rle, rational2str, removeClass, remove_whitespaces, selectOption, selectOrAddOption, selectValue2Option, show_rule_diagram, show_rule_properties, spaceshipType, splitPattern, _ref, _ref1, _ref2, _ref3, _ref4;
  _ref = this.rules, Rules = _ref.Rules, NamedRules = _ref.NamedRules, Rule2Name = _ref.Rule2Name;
  _ref1 = this.cells, Cells = _ref1.Cells, Point = _ref1.Point, splitPattern = _ref1.splitPattern, getDualTransform = _ref1.getDualTransform;
  _ref2 = this.reversible_ca, MargolusNeighborehoodField = _ref2.MargolusNeighborehoodField, Array2d = _ref2.Array2d;
  _ref3 = this.math_util, div = _ref3.div, mod = _ref3.mod, line_pixels = _ref3.line_pixels, rational2str = _ref3.rational2str, getReadableFileSizeString = _ref3.getReadableFileSizeString, cap = _ref3.cap;
  FieldView = this.field_view.FieldView;
  getCanvasCursorPosition = this.canvas_util.getCanvasCursorPosition;
  DomBuilder = this.dom_builder.DomBuilder;
  parseUri = this.parseuri.parseUri;
  _ref4 = this.rle, parse_rle = _ref4.parse_rle, remove_whitespaces = _ref4.remove_whitespaces;
  E = function(id) {
    return document.getElementById(id);
  };
  nodefault = function(handler) {
    return function(e) {
      e.preventDefault();
      return handler(e);
    };
  };
  makeElement = function(tag, attrs, text) {
    var attr, aval, elem, _i, _len, _ref5;
    elem = document.createElement(tag);
    if (attrs != null) {
      for (_i = 0, _len = attrs.length; _i < _len; _i++) {
        _ref5 = attrs[_i], attr = _ref5[0], aval = _ref5[1];
        elem.setAttribute(attr, aval);
      }
    }
    if (text != null) {
      elem.appendChild(document.createTextNode(text));
    }
    return elem;
  };
  removeClass = function(e, c) {
    var ci, classes, _i, _len, _ref5;
    classes = [];
    _ref5 = e.className.split(" ");
    for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
      ci = _ref5[_i];
      if (c !== ci) {
        classes.push(ci);
      }
    }
    e.className = classes.join(" ");
    return null;
  };
  addClass = function(e, c) {
    var classes;
    classes = e.className;
    e.className = (classes = e.className) === "" ? c : classes + " " + c;
    return null;
  };
  selectValue2Option = function(elem) {
    var opt, val2opt, _i, _len, _ref5;
    val2opt = {};
    _ref5 = elem.options;
    for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
      opt = _ref5[_i];
      val2opt[opt.value] = opt;
    }
    return val2opt;
  };
  selectOption = function(elem, value, value0) {
    var o, val2opt;
    val2opt = selectValue2Option(elem);
    o = val2opt[value];
    if (value0 && (o == null)) {
      o = val2opt[value0];
    }
    if (o != null) {
      return o.selected = true;
    }
  };
  selectOrAddOption = function(elem, value, nameToAdd) {
    var option, val2opt;
    if (nameToAdd == null) {
      nameToAdd = value;
    }
    val2opt = selectValue2Option(elem);
    if ((option = val2opt[value]) == null) {
      option = new Option(nameToAdd, value);
      elem.options[elem.options.length] = option;
    }
    return option.selected = true;
  };
  idOrNull = function(elem) {
    if (elem === null) {
      return null;
    } else {
      return elem.getAttribute("id");
    }
  };
  spaceshipType = function(dx, dy) {
    if (dx == null) {
      return "unknown";
    } else if (dx === 0 && dy === 0) {
      return "oscillator";
    } else if (dx === 0 || dy === 0) {
      return "orthogonal spaceship";
    } else if (Math.abs(dx) === Math.abs(dy)) {
      return "diagonal spaceship";
    } else {
      return "slant spaceship";
    }
  };
  ButtonGroup = (function() {
    function ButtonGroup(containerElem, tag, selectedId, selectedClass) {
      var btn, _i, _len, _ref5;
      if (selectedId == null) {
        selectedId = null;
      }
      this.selectedClass = selectedClass != null ? selectedClass : "btn-selected";
      if (selectedId !== null) {
        addClass((this.selected = E(selectedId)), this.selectedClass);
      } else {
        this.selected = null;
      }
      this.handlers = {
        change: []
      };
      _ref5 = containerElem.getElementsByTagName(tag);
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        btn = _ref5[_i];
        btn.addEventListener("click", this._btnClickListener(btn));
      }
      null;
    }

    ButtonGroup.prototype._btnClickListener = function(newBtn) {
      var _this = this;
      return function(e) {
        var handler, newId, oldBtn, oldId, _i, _len, _ref5;
        oldBtn = _this.selected;
        newId = idOrNull(newBtn);
        oldId = idOrNull(oldBtn);
        if (newId !== oldId) {
          if (oldBtn !== null) {
            removeClass(oldBtn, _this.selectedClass);
          }
          if (newBtn !== null) {
            addClass(newBtn, _this.selectedClass);
          }
          _this.selected = newBtn;
          _ref5 = _this.handlers.change;
          for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
            handler = _ref5[_i];
            handler(e, newId, oldId);
          }
          return null;
        }
      };
    };

    ButtonGroup.prototype.addEventListener = function(name, handler) {
      var handlers;
      if ((handlers = this.handlers[name]) == null) {
        throw new Error("Hander " + name + " is not supported");
      }
      return handlers.push(handler);
    };

    return ButtonGroup;

  })();
  DelayedHandler = (function() {
    function DelayedHandler(delayMs, handler) {
      this.delayMs = delayMs;
      this.handler = handler;
      this.timerId = null;
    }

    DelayedHandler.prototype.fireEvent = function(e) {
      var _this = this;
      this.cancel();
      return this.timerId = setTimeout((function() {
        return _this.handler(e);
      }), this.delayMs);
    };

    DelayedHandler.prototype.cancel = function() {
      var t;
      if ((t = this.timerId) !== null) {
        clearTimeout(t);
        return this.timerId = null;
      }
    };

    return DelayedHandler;

  })();
  addDelayedListener = function(element, eventNames, delayMs, listener) {
    var delayedListener, eName, handler, _i, _len;
    delayedListener = new DelayedHandler(delayMs, listener);
    handler = function(e) {
      return delayedListener.fireEvent(e);
    };
    for (_i = 0, _len = eventNames.length; _i < _len; _i++) {
      eName = eventNames[_i];
      element.addEventListener(eName, handler);
    }
    return null;
  };
  GolApplication = (function() {
    function GolApplication(field_size, rule_string, container_id, canvas_id, overlay_id, time_display_id) {
      var rule;
      rule = Rules.parse(rule_string);
      this.gol = new MargolusNeighborehoodField((function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Array2d, field_size, function(){}), rule);
      this.gol.clear();
      this.view = new FieldView(this.gol.field);
      this.step_size = 1;
      this.step_delay = 50;
      this.field_player = null;
      this.field_player_proc = null;
      this.canvas = E(canvas_id);
      this.canvas_overlay = E(overlay_id);
      this.canvas_container = E(container_id);
      this.time_display = time_display_id && E(time_display_id);
      this.mouse_tools = {
        draw: new ToolDraw(this),
        select: new ToolSelect(this),
        stamp: new ToolStamp(this),
        eraser: new ToolEraser(this, 5)
      };
      this.mouse_tool = null;
      this.selection = null;
      this.encoder = null;
      this.spaceship_catcher = null;
      this.library = new LibraryPane(E("pattern-report"), E("library-size"), this);
      this.buffer = new BufferPane(E("active-pattern-canvas"));
      this.ghost_click_detector = new GhostClickDetector();
    }

    GolApplication.prototype.setSize = function(cols, rows) {
      var RECOMMENDED_HEIGHT, RECOMMENDED_WIDTH, ctx, max_cell_size;
      RECOMMENDED_WIDTH = 800;
      RECOMMENDED_HEIGHT = 600;
      if (!(cols === this.gol.field.width && rows === this.gol.field.height)) {
        this.gol = new MargolusNeighborehoodField(new Array2d(cols, rows), this.gol.rule);
        this.gol.clear();
        this.view.field = this.gol.field;
        max_cell_size = Math.min(RECOMMENDED_WIDTH / cols, RECOMMENDED_HEIGHT / rows) | 0;
        if (max_cell_size < this.view.cell_size) {
          this.view.cell_size = max_cell_size;
          if (max_cell_size <= 2) {
            this.view.grid_width = 0;
          }
        }
        this.adjustCanvasSize();
        ctx = this.canvas.getContext("2d");
        this.view.invalidate();
        return this.view.draw(ctx);
      }
    };

    GolApplication.prototype.startPlayer = function(direction) {
      if (this.field_player) {
        this.stopPlayer();
      }
      this.field_player_proc = (function() {
        var _this = this;
        switch (direction) {
          case 1:
            return function() {
              return _this.doStep();
            };
          case -1:
            return function() {
              return _this.doReverseStep();
            };
          default:
            throw new Error("Bad direction:" + direction);
        }
      }).call(this);
      return this.field_player = window.setInterval(this.field_player_proc, this.step_delay);
    };

    GolApplication.prototype.isPlaying = function() {
      return this.field_player != null;
    };

    GolApplication.prototype.stopPlayer = function() {
      if (this.field_player) {
        window.clearInterval(this.field_player);
        return this.field_player = null;
      }
    };

    GolApplication.prototype.updateCanvas = function() {
      return this.view.draw(this.canvas.getContext("2d"));
    };

    GolApplication.prototype.updateCanvasBox = function(x0, y0, x1, y1) {
      return this.view.draw_box(this.canvas.getContext("2d"), x0, y0, x1, y1);
    };

    GolApplication.prototype.parseCellSize = function(sel_style) {
      var sh, st, sw, _ref5;
      _ref5 = st = sel_style.split(","), sw = _ref5[0], sh = _ref5[1];
      if (st.length !== 2) {
        throw new Error("Value is incorrect: " + sel_style);
      }
      return [parseInt(sw, 10), parseInt(sh, 10)];
    };

    GolApplication.prototype.adjustCanvasSize = function() {
      var h, w;
      w = this.gol.field.width * this.view.cell_size;
      h = this.gol.field.height * this.view.cell_size;
      this.canvas_container.style.width = "" + w + "px";
      this.canvas_container.style.height = "" + h + "px";
      this.canvas_overlay.width = this.canvas.width = w;
      return this.canvas_overlay.height = this.canvas.height = h;
    };

    GolApplication.prototype.setCellSize = function(size) {
      var ctx;
      this.view.cell_size = size;
      this.adjustCanvasSize();
      ctx = this.canvas.getContext("2d");
      this.view.invalidate();
      return this.view.draw(ctx);
    };

    GolApplication.prototype.setShowGrid = function(show) {
      var ctx;
      this.view.grid_width = show ? 1 : 0;
      ctx = this.canvas.getContext("2d");
      this.view.invalidate();
      return this.view.draw(ctx);
    };

    GolApplication.prototype.doStep = function() {
      var gc, i, _i, _ref5;
      for (i = _i = 0, _ref5 = this.step_size; 0 <= _ref5 ? _i < _ref5 : _i > _ref5; i = 0 <= _ref5 ? ++_i : --_i) {
        this.gol.transform();
        if ((this.gol.phase === 0) && (gc = this.spaceship_catcher)) {
          gc.scan(this.gol);
        }
      }
      if ((this.spaceship_catcher != null) && this.gol.generation >= this.spaceship_catcher.reseed_period) {
        this.do_clear();
        this.random_fill_selection(parseFloat(E("random-fill-percent").value) * 0.01);
      }
      this.updateCanvas();
      this.update_time();
      return this.recordFrame();
    };

    GolApplication.prototype.recordFrame = function() {
      var sizeElem;
      if (this.encoder == null) {
        return;
      }
      this.encoder.addFrame(this.canvas.getContext("2d"));
      sizeElem = document.getElementById("gif-size");
      if (sizeElem != null) {
        return sizeElem.innerHTML = getReadableFileSizeString(this.encoder.stream().getSize());
      }
    };

    GolApplication.prototype.setMouseTool = function(tool) {
      if (this.mouse_tool) {
        this.mouse_tool.on_disable();
      }
      this.mouse_tool = tool;
      if (tool) {
        return tool.on_enable();
      }
    };

    GolApplication.prototype.setDelay = function(delay) {
      if ((delay != null) && delay <= 0) {
        throw new Error("Bad delay value: " + delay);
      }
      if (delay === this.step_delay) {
        return;
      }
      this.step_delay = delay;
      if (this.isPlaying()) {
        window.clearInterval(this.field_player);
        return this.field_player = window.setInterval(this.field_player_proc, this.step_delay);
      }
    };

    GolApplication.prototype.doReverseStep = function() {
      var e, i, _i, _ref5;
      try {
        for (i = _i = 0, _ref5 = this.step_size; 0 <= _ref5 ? _i < _ref5 : _i > _ref5; i = 0 <= _ref5 ? ++_i : --_i) {
          this.gol.untransform();
        }
        this.updateCanvas();
        this.update_time();
        return this.recordFrame();
      } catch (_error) {
        e = _error;
        alert("" + e);
        return this.stopPlayer();
      }
    };

    GolApplication.prototype.update_time = function() {
      if (this.time_display) {
        return this.time_display.innerHTML = "" + this.gol.generation;
      }
    };

    GolApplication.prototype.reset_time = function() {
      this.gol.set_generation(mod(this.gol.generation, 2));
      return this.update_time();
    };

    GolApplication.prototype.set_rule = function(srule) {
      var e, rule;
      try {
        rule = Rules.parse(srule);
        this.gol.set_rule(rule);
        show_rule_diagram(rule, E("function_display"));
        return show_rule_properties(rule, E("function_properties"));
      } catch (_error) {
        e = _error;
        return alert("" + e);
      }
    };

    GolApplication.prototype.do_clear = function() {
      this.gol.clear();
      this.updateCanvas();
      return this.update_time();
    };

    GolApplication.prototype.attach_listeners = function() {
      var self, widget;
      widget = this.canvas_container;
      self = this;
      widget.addEventListener("mousedown", nodefault((function(e) {
        if (!self.ghost_click_detector.isGhost) {
          return self.mouse_tool.on_mouse_down(e);
        }
      }), false));
      widget.addEventListener("mouseup", nodefault(function(e) {
        if (!self.ghost_click_detector.isGhost) {
          return self.mouse_tool.on_mouse_up(e);
        }
      }), false);
      widget.addEventListener("mousemove", nodefault(function(e) {
        return self.mouse_tool.on_mouse_move(e);
      }), false);
      widget.addEventListener("mouseout", nodefault(function(e) {
        return self.mouse_tool.on_mouse_out(e);
      }), false);
      widget.addEventListener("touchstart", (function(e) {
        return self.mouse_tool.on_touch_start(e);
      }), false);
      widget.addEventListener("touchend", (function(e) {
        return self.mouse_tool.on_touch_end(e);
      }), false);
      widget.addEventListener("touchmove", (function(e) {
        return self.mouse_tool.on_touch_move(e);
      }), false);
      widget.addEventListener("touchleave", (function(e) {
        return self.mouse_tool.on_touch_leave(e);
      }), false);
      return this.ghost_click_detector.addListeners(widget);
    };

    /*
    Load initial state from the URL parameters
    */


    GolApplication.prototype.load_parameters = function() {
      var c, colors, e, keys, r, s, sz, x0, y0, _ref5, _ref6,
        _this = this;
      keys = parseUri(window.location).queryKey;
      if (keys.size != null) {
        sz = keys.size.split('x');
        if (sz.length !== 2) {
          throw new Error("Size must have form WIDTHxHEIGHT");
        }
        c = parseInt(sz[0], 10);
        r = parseInt(sz[1], 10);
        if (r % 2 !== 0 || c % 2 !== 0) {
          throw new Error("Width and height must be even");
        }
        this.gol = new MargolusNeighborehoodField(new Array2d(c, r), this.gol.rule);
        this.gol.clear();
        this.view = new FieldView(this.gol.field);
      }
      if (keys.cell_size != null) {
        _ref5 = this.parseCellSize(keys.cell_size), this.view.cell_size = _ref5[0], this.view.grid_width = _ref5[1];
      }
      if (keys.colors != null) {
        colors = keys.colors.split(";");
        if (colors.length !== 4) {
          throw new Error("Colors attribute must have 4 ';'-separated values: colors of cells and colors of grid");
        }
        this.view.cell_colors[0] = colors[0];
        this.view.cell_colors[1] = colors[1];
        this.view.grid_colors[0] = colors[2];
        this.view.grid_colors[1] = colors[3];
      }
      if (keys.rle != null) {
        x0 = keys.rle_x0 ? parseInt(keys.rle_x0, 10) : 0;
        y0 = keys.rle_y0 ? parseInt(keys.rle_y0, 10) : 0;
        parse_rle(keys.rle, function(x, y) {
          return _this.gol.field.set_wrapped(x0 + x, y0 + y, 1);
        });
      }
      if (keys.rule != null) {
        try {
          r = (_ref6 = NamedRules[keys.rule]) != null ? _ref6 : Rules.parse(keys.rule, ",");
          this.gol.set_rule(r);
        } catch (_error) {
          e = _error;
          alert("Incorrect rule: " + keys.rule);
        }
      }
      if (keys.frame_delay != null) {
        try {
          this.setDelay(parseInt(keys.frame_delay, 10));
        } catch (_error) {
          e = _error;
          alert(e);
        }
      }
      if (keys.step != null) {
        try {
          s = parseInt(keys.step, 10);
          if ((s == null) || s <= 0) {
            throw new Error("Incorrect step value:" + s);
          }
          return this.step_size = s;
        } catch (_error) {
          e = _error;
          return alert(e);
        }
      }
    };

    GolApplication.prototype.encode_state_in_url = function() {
      var argsStartAt, baseUrl, fld, loc, pattern, srle, srule, urlArgs, x0, y0, _ref5;
      urlArgs = [];
      srule = Rules.stringify(this.gol.rule);
      urlArgs.push("rule=" + srule);
      fld = this.gol.field;
      pattern = fld.get_cells(0, 0, fld.width, fld.height);
      if (pattern.length > 0) {
        _ref5 = Cells.bounds(pattern), x0 = _ref5[0], y0 = _ref5[1];
        srle = Cells.to_rle(Cells.offset(pattern, -x0, -y0));
        urlArgs.push("rle_x0=" + x0);
        urlArgs.push("rle_y0=" + y0);
        urlArgs.push("rle=" + srle);
      }
      urlArgs.push("step=" + this.step_size);
      urlArgs.push("frame_delay=" + this.step_delay);
      urlArgs.push("size=" + fld.width + "x" + fld.height);
      urlArgs.push("cell_size=" + this.view.cell_size + "," + this.view.grid_width);
      loc = "" + window.location;
      argsStartAt = loc.indexOf("?");
      baseUrl = argsStartAt === -1 ? loc : loc.substr(0, argsStartAt);
      return baseUrl + "?" + (urlArgs.join("&"));
    };

    GolApplication.prototype.initialize = function() {
      this.load_parameters();
      this.adjustCanvasSize();
      this.setMouseTool(this.mouse_tools.draw);
      this.updateCanvas();
      return this.attach_listeners();
    };

    GolApplication.prototype.clear_selection = function() {
      var sel;
      if (sel = this.selection) {
        this.gol.field.fill_box(sel[0], sel[1], sel[2], sel[3], 0);
        return this.updateCanvasBox.apply(this, sel);
      }
    };

    GolApplication.prototype.random_fill_selection = function(p) {
      var sel;
      if (p < 0 || p > 1 || isNaN(p)) {
        alert("Wrong percentage: " + p);
        return;
      }
      if (sel = this.selection) {
        this.gol.field.random_fill(sel[0], sel[1], sel[2] + 1, sel[3] + 1, p);
        return this.updateCanvasBox.apply(this, sel);
      }
    };

    GolApplication.prototype._getAnalyzerMaxSteps = function() {
      var maxSteps;
      maxSteps = parseInt(E("analysis-max-steps").value, 10);
      if (isNaN(maxSteps)) {
        maxSteps = 2048;
        alert("Incorrect value of the analysis depth, will use " + maxSteps);
      }
      return maxSteps;
    };

    GolApplication.prototype.enable_spaceship_catcher = function() {
      var e, maxSteps, max_spaceship_sz, on_spaceship, reseed_period,
        _this = this;
      if (this.spaceship_catcher === null) {
        maxSteps = this._getAnalyzerMaxSteps();
        on_spaceship = function(pattern, rule) {
          var result;
          if (result = Cells.analyze(pattern, rule, maxSteps)) {
            if (result.period != null) {
              if (result.dx !== 0 || result.dy !== 0) {
                _this.library.put(result);
              }
            }
          }
          return null;
        };
        try {
          reseed_period = parseInt(E("catcher-reseed-period").value, 10);
          max_spaceship_sz = parseInt(E("catcher-max-spaceship-size").value, 10);
          if (isNaN(reseed_period || reseed_period <= 0)) {
            throw new Error("Reseed period negative");
          }
          if ((max_spaceship_sz == null) || (isNaN(max_spaceship_sz))) {
            throw new Error("Bad max spaceship value");
          }
          this.spaceship_catcher = new SpaceshipCatcher(on_spaceship, max_spaceship_sz, reseed_period);
          E("catcher-reseed-period").readOnly = true;
          E("catcher-max-spaceship-size").readOnly = true;
          return addClass(E("toggle-catcher"), "btn-selected");
        } catch (_error) {
          e = _error;
          return alert("Failed to enable catcher:" + e);
        }
      }
    };

    GolApplication.prototype.disable_spaceship_catcher = function() {
      if (this.spaceship_catcher !== null) {
        this.spaceship_catcher = null;
        E("catcher-reseed-period").readOnly = false;
        E("catcher-max-spaceship-size").readOnly = false;
        return removeClass(E("toggle-catcher"), "btn-selected");
      }
    };

    GolApplication.prototype.clear_nonselection = function() {
      var sel;
      if (sel = this.selection) {
        this.gol.field.fill_outside_box(sel[0], sel[1], sel[2], sel[3], 0);
        return this.updateCanvas();
      }
    };

    GolApplication.prototype.start_gif_recorder = function() {
      var encoder;
      if (this.encoder) {
        return;
      }
      this.encoder = encoder = new GIFEncoder();
      encoder.setPalette(exactPalette);
      encoder.setRepeat(0);
      encoder.setDelay(this.step_delay);
      encoder.start();
      return this.recordFrame();
    };

    /*
    Stop recorder and show window or return data URL
    */


    GolApplication.prototype.stopGifRecorder = function() {
      var data_url, encoder, out;
      if (!this.encoder) {
        alert("Not started");
        return;
      }
      encoder = this.encoder;
      this.encoder = null;
      encoder.finish();
      data_url = "data:image/gif;base64," + encoder.stream().getB64Data();
      out = E("gif-output");
      out.innerHTML = "";
      return out.appendChild(makeElement("img", [["src", data_url], ["alt", "GIF animation"]]));
    };

    GolApplication.prototype.gifRecorderClear = function() {
      return E("gif-output").innerHTML = "";
    };

    GolApplication.prototype.analyzeSelection = function() {
      var cells, root,
        _this = this;
      cells = this.getSelectedCells();
      if (cells.length === 0) {
        return;
      }
      root = E("analysis-report-area");
      root.innerHTML = "<div style='text-align:center'><span class='icon-wait'>Analysing...</span></div>";
      E("analysis-result").style.display = "block";
      return window.setTimeout((function() {
        var canv, dom, in_library, makeCanvas, result, _ref5, _ref6;
        _this.analysis_result = result = Cells.analyze(cells, _this.gol.rule, _this._getAnalyzerMaxSteps());
        makeCanvas = function(imgW, imgH) {
          return makeElement("canvas", [["width", imgW], ["height", imgH]]);
        };
        canv = drawPatternOnCanvas(makeCanvas, result.cells, [128, 96], [1, 24], 1);
        in_library = (_this.library.has(result)) || (_this.library.hasDual(result, _this.gol.rule));
        dom = new DomBuilder;
        dom.tag("div").CLASS("pattern-background").append(canv).end();
        dom.tag("ul");
        dom.tag("li").text("Pattern type: ").text(spaceshipType(result.dx, result.dy)).end();
        dom.tag("li").text("Population: " + cells.length + " cells").end();
        dom.tag("li").text("Period: ").text((_ref5 = result.period) != null ? _ref5 : "unknown").end();
        if ((result.dx != null) && (result.dx || result.dy)) {
          dom.tag("li").text("Δx=" + result.dx + ", Δy=" + result.dy).end();
        }
        dom.tag("li").text(in_library ? "Present in library" : "Not in library").end();
        dom.end();
        root.innerHTML = "";
        root.appendChild(dom.finalize());
        _this.buffer.set((_ref6 = result.cells) != null ? _ref6 : cells);
        return E("analysis-result-close").focus();
      }), 1);
    };

    GolApplication.prototype.analysisResultToLibrary = function() {
      if (this.analysis_result != null) {
        return this.library.put(this.analysis_result);
      }
    };

    GolApplication.prototype.copyToBuffer = function() {
      this.analysis_result = null;
      return this.buffer.set(Cells.normalize(this.getSelectedCells()));
    };

    GolApplication.prototype.getSelectedCells = function() {
      var sel, _ref5;
      sel = this.selection;
      if (!sel) {
        return [];
      }
      sel = this.gol.snap_box(sel);
      return (_ref5 = this.gol.field).get_cells.apply(_ref5, sel);
    };

    GolApplication.prototype.saveLibrary = typeof Storage === "undefined" || Storage === null ? function() {
      return alert("Storage not supported");
    } : function(newName) {
      var e;
      if (newName == null) {
        newName = false;
      }
      try {
        this.library.save(localStorage, newName);
        return this.updateLibrariesList();
      } catch (_error) {
        e = _error;
        return alert(e);
      }
    };

    GolApplication.prototype.deleteCurrentLibrary = typeof Storage === "undefined" || Storage === null ? function() {
      return alert("Storage not supported");
    } : function() {
      if (confirm("Are you sure you want to clear current library and remove it from the local storage?\nThis action can not be undone.")) {
        this.library.deleteCurrent(localStorage);
        return this.updateLibrariesList();
      }
    };

    GolApplication.prototype.updateLibrariesList = function() {
      var key, libName, libs, libsElem, _i, _len;
      if (typeof Storage === "undefined" || Storage === null) {
        return;
      }
      libsElem = E("list-libraries");
      libs = [];
      for (key in localStorage) {
        if (key.match(/^library-/)) {
          libs.push(key.substr(8));
        }
      }
      libs.sort();
      libsElem.innerHTML = "";
      libsElem.options.add(new Option("---", ""));
      for (_i = 0, _len = libs.length; _i < _len; _i++) {
        libName = libs[_i];
        libsElem.options.add(new Option(libName, libName));
      }
      return libsElem.options[0].selected = true;
    };

    GolApplication.prototype.showOverlay = function(visible) {
      return this.canvas_overlay.style.visibility = visible ? "visible" : "hidden";
    };

    return GolApplication;

  })();
  BaseMouseTool = (function() {
    function BaseMouseTool(golApp, snapping, show_overlay) {
      this.golApp = golApp;
      this.snapping = snapping != null ? snapping : false;
      this.show_overlay = show_overlay != null ? show_overlay : true;
      this.dragging = false;
      this.last_xy = null;
      this.old_rect = null;
    }

    BaseMouseTool.prototype.get_xy = function(e, snap) {
      var ixy, x, y, _ref5;
      if (snap == null) {
        snap = false;
      }
      _ref5 = getCanvasCursorPosition(e, this.golApp.canvas_container), x = _ref5[0], y = _ref5[1];
      ixy = this.golApp.view.xy2index(x, y);
      if (snap) {
        return this.snap_below(ixy);
      } else {
        return ixy;
      }
    };

    BaseMouseTool.prototype.clear_old_rect = function(ctx) {
      var r;
      if ((r = this.old_rect)) {
        return ctx.clearRect.apply(ctx, r);
      }
    };

    BaseMouseTool.prototype.snap_below = function(_arg) {
      var gol, x, y;
      x = _arg[0], y = _arg[1];
      gol = this.golApp.gol;
      return [gol.snap_below(x), gol.snap_below(y)];
    };

    BaseMouseTool.prototype.on_mouse_up = function(e) {
      return this.dragging = false;
    };

    BaseMouseTool.prototype.on_mouse_move = function(e) {
      var xy, xy0;
      xy = this.get_xy(e, this.snapping);
      xy0 = this.last_xy;
      if (xy0 === null) {
        return this.last_xy = xy;
      } else {
        if (!Point.equal(xy, xy0)) {
          this.on_cell_change(e, xy);
          return this.last_xy = xy;
        }
      }
    };

    BaseMouseTool.prototype.getOverlayContext = function() {
      return this.golApp.canvas_overlay.getContext("2d");
    };

    BaseMouseTool.prototype.on_mouse_down = function(e) {
      var xy;
      this.dragging = true;
      this.last_xy = xy = this.get_xy(e, this.snapping);
      return this.on_click_cell(e, xy);
    };

    BaseMouseTool.prototype.on_enable = function() {
      this.dragging = false;
      this.last_xy = null;
      if (this.show_overlay) {
        return this.golApp.showOverlay(true);
      }
    };

    BaseMouseTool.prototype.on_disable = function() {
      if (this.show_overlay) {
        this.clear_old_rect(this.getOverlayContext());
        return this.golApp.showOverlay(false);
      }
    };

    BaseMouseTool.prototype.on_cell_change = function() {};

    BaseMouseTool.prototype.on_click_cell = function() {};

    BaseMouseTool.prototype.on_mouse_out = function() {};

    BaseMouseTool.prototype.on_touch_start = function(e) {
      if (e.touches.length === 1) {
        this.on_mouse_down(e);
        return e.preventDefault();
      }
    };

    BaseMouseTool.prototype.on_touch_leave = function(e) {
      return this.on_mouse_out(e);
    };

    BaseMouseTool.prototype.on_touch_end = function(e) {
      if (this.dragging) {
        e.preventDefault();
        return this.on_mouse_up(e);
      }
    };

    BaseMouseTool.prototype.on_touch_move = function(e) {
      if (this.dragging) {
        e.preventDefault();
        return this.on_mouse_move(e);
      }
    };

    return BaseMouseTool;

  })();
  /*
  # In some mobile browsers, ghost clicks can not be prevented. So here easy solution: every mouse event,
  # coming after some interval after a touch event is ghost
  */

  GhostClickDetector = (function() {
    function GhostClickDetector() {
      var _this = this;
      this.isGhost = false;
      this.timerHandle = null;
      this.ghostInterval = 1000;
      this._onTimer = function() {
        _this.isGhost = false;
        return _this.timerHandle = null;
      };
      this._onTouch = function() {
        return _this.onTouch();
      };
    }

    GhostClickDetector.prototype.onTouch = function() {
      this.stopTimer();
      this.isGhost = true;
      return this.timerHandle = window.setTimeout(this._onTimer, this.ghostInterval);
    };

    GhostClickDetector.prototype.stopTimer = function() {
      var handle;
      if ((handle = this.timerHandle)) {
        window.clearTimeout(handle);
        return this.timerHandle = null;
      }
    };

    GhostClickDetector.prototype.addListeners = function(element) {
      var evtName, _i, _len, _ref5, _results;
      _ref5 = ["touchstart", "touchend"];
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        evtName = _ref5[_i];
        _results.push(element.addEventListener(evtName, this._onTouch, false));
      }
      return _results;
    };

    return GhostClickDetector;

  })();
  /*
  # Mouse tool for erasing
  */

  ToolEraser = (function(_super) {
    __extends(ToolEraser, _super);

    function ToolEraser(golApp, size) {
      this.size = size != null ? size : 3;
      ToolEraser.__super__.constructor.call(this, golApp, false, true);
      this.preview_color = "rgba(255,20,0,0.4)";
    }

    ToolEraser.prototype._drawPreview = function(_arg) {
      var cell_size, ctx, dc, rect, sz, x0, y0;
      x0 = _arg[0], y0 = _arg[1];
      cell_size = this.golApp.view.cell_size;
      sz = this.size * cell_size;
      dc = (this.size / 2) | 0;
      ctx = this.getOverlayContext();
      ctx.fillStyle = this.preview_color;
      this.clear_old_rect(ctx);
      rect = [(x0 - dc) * cell_size, (y0 - dc) * cell_size, sz, sz];
      ctx.fillRect.apply(ctx, rect);
      this.old_rect = rect;
      return null;
    };

    ToolEraser.prototype.on_cell_change = function(e, xy) {
      this._drawPreview(xy);
      if (this.dragging) {
        return this._erase_at(xy);
      }
    };

    ToolEraser.prototype._erase_at = function(_arg) {
      var dc, s, x, y;
      x = _arg[0], y = _arg[1];
      s = this.size;
      dc = (s / 2) | 0;
      this.golApp.gol.field.fill_box(x - dc, y - dc, x - dc + s, y - dc + s, 0);
      return this.golApp.updateCanvasBox(x - dc, y - dc, x - dc + s, y - dc + s);
    };

    ToolEraser.prototype.on_click_cell = function(e, xy) {
      return this._erase_at(xy);
    };

    return ToolEraser;

  })(BaseMouseTool);
  /*
  #Mouse tool that draws given pattern
  */

  ToolStamp = (function(_super) {
    __extends(ToolStamp, _super);

    function ToolStamp(golApp) {
      ToolStamp.__super__.constructor.call(this, golApp, true, true);
      this.preview_color = "rgba(255,255,0,0.4)";
    }

    ToolStamp.prototype._drawPreview = function(_arg) {
      var ctx, dx, dy, fig, i, size, x, x0, xx, y, y0, yy, _i, _len, _ref5, _ref6;
      x0 = _arg[0], y0 = _arg[1];
      fig = this.golApp.buffer.pattern;
      if (fig.length === 0) {
        return;
      }
      size = this.golApp.view.cell_size;
      _ref5 = this.golApp.buffer.patternExtent, dx = _ref5[0], dy = _ref5[1];
      x0 -= dx;
      y0 -= dy;
      ctx = this.getOverlayContext();
      ctx.fillStyle = this.preview_color;
      this.clear_old_rect(ctx);
      for (i = _i = 0, _len = fig.length; _i < _len; i = ++_i) {
        _ref6 = fig[i], x = _ref6[0], y = _ref6[1];
        xx = (x + x0) * size;
        yy = (y + y0) * size;
        ctx.fillRect(xx, yy, size, size);
      }
      this.old_rect = [x0 * size, y0 * size, (dx + 1) * size, (dy + 1) * size];
      return null;
    };

    ToolStamp.prototype.on_cell_change = function(e, xy) {
      return this._drawPreview(xy);
    };

    ToolStamp.prototype.on_click_cell = function(e, xy) {
      var app, buffer, extent, origin, _ref5;
      app = this.golApp;
      buffer = app.buffer;
      extent = buffer.patternExtent;
      origin = Point.subtract(xy, extent);
      (_ref5 = app.gol.field).put_cells.apply(_ref5, [buffer.pattern].concat(__slice.call(origin)));
      return app.updateCanvasBox(origin[0], origin[1], xy[0] + 1, xy[1] + 1);
    };

    return ToolStamp;

  })(BaseMouseTool);
  /*
  Mouse tool that draws lines of 1 or 0 cells
  */

  ToolDraw = (function(_super) {
    __extends(ToolDraw, _super);

    function ToolDraw(golApp) {
      ToolDraw.__super__.constructor.call(this, golApp, false, false);
      this.dragging = false;
      this.value = null;
    }

    ToolDraw.prototype.update_box = function(xy_a, xy_b) {
      var _ref5;
      return (_ref5 = this.golApp).updateCanvasBox.apply(_ref5, Point.boundBox(xy_a, xy_b));
    };

    ToolDraw.prototype.draw_at = function(x, y) {
      return this.golApp.gol.field.set(x, y, this.value);
    };

    ToolDraw.prototype.on_cell_change = function(e, xy) {
      var dxy, i, last_xy, x0, xx, y0, yy, _i, _ref5, _ref6, _ref7;
      if (this.dragging) {
        dxy = Point.subtract(xy, this.last_xy);
        _ref5 = line_pixels.apply(null, dxy), xx = _ref5[0], yy = _ref5[1];
        _ref6 = last_xy = this.last_xy, x0 = _ref6[0], y0 = _ref6[1];
        for (i = _i = 1, _ref7 = xx.length; 1 <= _ref7 ? _i < _ref7 : _i > _ref7; i = 1 <= _ref7 ? ++_i : --_i) {
          this.draw_at(x0 + xx[i], y0 + yy[i]);
        }
        return this.update_box(last_xy, xy);
      }
    };

    ToolDraw.prototype.on_click_cell = function(e, xy) {
      var x, y;
      x = xy[0], y = xy[1];
      this.value = 1 ^ this.golApp.gol.field.get(x, y);
      this.draw_at(x, y);
      return this.golApp.updateCanvasBox(x, y, x + 1, y + 1);
    };

    ToolDraw.prototype.on_mouse_out = function(e) {
      return this.dragging = false;
    };

    return ToolDraw;

  })(BaseMouseTool);
  /*
  Mouse tool that selects areas of the field
  */

  ToolSelect = (function(_super) {
    __extends(ToolSelect, _super);

    function ToolSelect(golApp) {
      ToolSelect.__super__.constructor.call(this, golApp, true, true);
      this.selection_color = "rgba(0,0,255,0.3)";
      this.xy0 = null;
      this.xy1 = null;
    }

    ToolSelect.prototype.on_mouse_up = function(e) {
      ToolSelect.__super__.on_mouse_up.call(this, e);
      return this.golApp.selection = this.selection();
    };

    ToolSelect.prototype.on_cell_change = function(e, xy) {
      if (this.dragging) {
        this.xy1 = xy;
        return this.draw_box();
      }
    };

    ToolSelect.prototype.on_click_cell = function(e, xy) {
      this.xy0 = this.xy1 = xy;
      return this.draw_box();
    };

    ToolSelect.prototype.selection = function() {
      var d, x0, x1, y0, y1, _ref5;
      if (this.xy0 && this.xy1) {
        _ref5 = Point.boundBox(this.xy0, this.xy1), x0 = _ref5[0], y0 = _ref5[1], x1 = _ref5[2], y1 = _ref5[3];
        d = this.snapping ? 1 : 0;
        return [x0, y0, x1 + d, y1 + d];
      } else {
        return [0, 0, 0, 0];
      }
    };

    ToolSelect.prototype.draw_box = function() {
      var ctx, rect, size, x0, x1, y0, y1, _ref5;
      ctx = this.getOverlayContext();
      size = this.golApp.view.cell_size;
      ctx.fillStyle = this.selection_color;
      _ref5 = this.selection(), x0 = _ref5[0], y0 = _ref5[1], x1 = _ref5[2], y1 = _ref5[3];
      rect = [x0 * size, y0 * size, (x1 - x0) * size, (y1 - y0) * size];
      this.clear_old_rect(ctx);
      this.old_rect = rect;
      return ctx.fillRect.apply(ctx, rect);
    };

    return ToolSelect;

  })(BaseMouseTool);
  BufferPane = (function() {
    function BufferPane(canvas, pattern, desiredSize) {
      this.canvas = canvas;
      if (pattern == null) {
        pattern = [];
      }
      this.desiredSize = desiredSize != null ? desiredSize : [64, 64];
      if (this.canvas.getContext == null) {
        throw new Error("Not a canvas");
      }
      this._bindEvents();
      this.oldRleValue = null;
      this.set(pattern);
    }

    BufferPane.prototype.updatePattern = function() {
      var canv, getCanvas;
      canv = this.canvas;
      getCanvas = function(w, h) {
        canv.width = w;
        canv.height = h;
        return canv;
      };
      return canv = drawPatternOnCanvas(getCanvas, this.pattern, this.desiredSize, [1, 24], 1);
    };

    BufferPane.prototype.set = function(pattern, update_rle) {
      var ex, ey, _ref5;
      if (update_rle == null) {
        update_rle = true;
      }
      this.pattern = pattern;
      _ref5 = Cells.extent(pattern), ex = _ref5[0], ey = _ref5[1];
      this.patternExtent = [ex + (ex & 1), ey + (ey & 1)];
      this.updatePattern();
      if (update_rle) {
        return this.toRle();
      }
    };

    BufferPane.prototype.transform = function(tfm) {
      return this.set(Cells.transform(this.pattern, tfm));
    };

    BufferPane.prototype.togglePhase = function() {
      return this.set(Cells.togglePhase(this.pattern));
    };

    BufferPane.prototype.toRle = function() {
      return E("rle-encoded").value = this.oldRleValue = Cells.to_rle(this.pattern);
    };

    BufferPane.prototype.fromRle = function() {
      var e, messageBoxElt, messageElt, rle;
      messageElt = E("rle-decode-message");
      messageBoxElt = E("rle-decode-box");
      rle = remove_whitespaces(E("rle-encoded").value);
      if (rle !== this.oldRleValue) {
        this.oldRleValue = rle;
        try {
          this.set(Cells.from_rle(rle), false);
          messageBoxElt.style.visibility = "hidden";
          return messageElt.innerHTML = "";
        } catch (_error) {
          e = _error;
          messageElt.innerHTML = "" + e;
          return messageBoxElt.style.visibility = "visible";
        }
      }
    };

    BufferPane.prototype._bindEvents = function() {
      var _this = this;
      return addDelayedListener(E("rle-encoded"), ["keypress", "blur", "change"], 200, function() {
        return _this.fromRle();
      });
    };

    return BufferPane;

  })();
  fill_rules = function(predefined_rules) {
    var i, name, opts, rule, _i, _len, _ref5;
    opts = E("select-rule").options;
    for (i = _i = 0, _len = predefined_rules.length; _i < _len; i = ++_i) {
      _ref5 = predefined_rules[i], name = _ref5[0], rule = _ref5[1];
      opts[i] = new Option(name, Rules.stringify(rule));
    }
    return opts[opts.length] = new Option("(User Defined)", "");
  };
  show_rule_diagram = function(rule, element) {
    var cells_icon, dom, elements, isFirst, j, row, x_str, x_value, y_value, _i, _j, _len, _len1;
    cells_icon = function(value) {
      return "cellicon icon-cells_" + (value.toString(16));
    };
    if (rule.length !== 16) {
      throw new Error("Function must be array of 16 elements, not\n" + rule);
    }
    dom = new DomBuilder;
    elements = [["0000", "1111"], ["1000", "0100", "0001", "0010"], ["1100", "0101", "0011", "1010"], ["1001", "0110"], ["0111", "1011", "1110", "1101"]];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      row = elements[_i];
      dom.tag("div").CLASS("func_row");
      isFirst = true;
      for (j = _j = 0, _len1 = row.length; _j < _len1; j = ++_j) {
        x_str = row[j];
        x_value = parseInt(x_str, 2);
        y_value = rule[x_value];
        if (y_value !== x_value) {
          if (!isFirst) {
            dom.tag("span").CLASS("icon icon-separator").end();
          }
          dom.tag("span").CLASS("func_pair").tag("span").CLASS(cells_icon(x_value)).end().tag("span").CLASS("icon icon-rarrow").end().tag("span").CLASS(cells_icon(y_value)).end().end();
          isFirst = false;
        }
      }
      dom.end();
    }
    element.innerHTML = "";
    return element.appendChild(dom.finalize());
  };
  show_rule_properties = function(rule, element) {
    var dom, dualTransform, hasAny, invertible, population_invariance, symm, symmetries;
    symmetries = Rules.find_symmetries(rule);
    population_invariance = Rules.invariance_type(rule);
    invertible = Rules.is_invertible(rule);
    dualTransform = getDualTransform(rule);
    dom = new DomBuilder;
    dom.tag("p").text("Rule is ").tag("span").CLASS(invertible ? "green-text" : "red-text").text(invertible ? "invertible" : "non-invertible").end().text(". ");
    dom.text("Population is ").text((function() {
      switch (population_invariance) {
        case "const":
          return "constant";
        case "inv-const":
          return "constant with inverse";
        default:
          return "variable";
      }
    })()).text(".");
    dom.end();
    dom.tag("p").text("Rule is invariant to:").tag("ul");
    hasAny = false;
    for (symm in symmetries) {
      dom.tag("li").text(Transforms.getDescription(symm)).end();
      hasAny = true;
    }
    if (!hasAny) {
      dom.tag("li").text("Nothing").end();
    }
    dom.end().end();
    dom.tag("p");
    if (dualTransform[0] === null) {
      dom.text("Rule has no dual transform.");
    } else {
      if (dualTransform[0] === "iden") {
        dom.text("Rule is self-dual");
      } else {
        dom.text("Rule has dual transform: ").text(Transforms.getDescription(dualTransform[0]));
      }
    }
    dom.end();
    element.innerHTML = "";
    return element.appendChild(dom.finalize());
  };
  Transforms = {
    iden: "identity transform",
    rot90: "rotation by 90°",
    rot180: "rotation by 180°",
    rot270: "rotation by 270°",
    flipx: "horizontal flip",
    flipy: "vertical flip",
    flipxy: "flip across main diagonal",
    flipixy: "flip across anti-diagonal",
    negate: "negation of cells",
    flipx_neg: "horizontal flip with negation",
    flipy_neg: "vertical flip with negation",
    getDescription: function(name) {
      var txt;
      if ((txt = this[name]) != null) {
        return txt;
      } else {
        throw new Error("Unknown identity transform name: " + name);
      }
    }
  };
  drawPatternOnCanvas = function(canvasGetter, cells, desired_size, cell_size_limits, grid_width) {
    var DESIRED_H, DESIRED_W, canv, cellSize, cell_max, cell_min, cols, ctx, fld, rows, view, x0, y0, _ref5;
    DESIRED_W = desired_size[0], DESIRED_H = desired_size[1];
    cell_min = cell_size_limits[0], cell_max = cell_size_limits[1];
    _ref5 = Cells.bounds(cells), x0 = _ref5[0], y0 = _ref5[1], cols = _ref5[2], rows = _ref5[3];
    cols++;
    rows++;
    cols += cols % 2;
    rows += rows % 2;
    cellSize = cap(cell_min, cell_max, Math.min(DESIRED_W / cols, DESIRED_H / rows) | 0);
    if (cellSize <= 2) {
      grid_width = 0;
    }
    fld = new Array2d(cols, rows);
    fld.fill(0);
    fld.put_cells(cells, 0, 0);
    view = new FieldView(fld);
    view.cell_size = cellSize;
    view.grid_width = grid_width;
    canv = canvasGetter(cols * cellSize, rows * cellSize);
    ctx = canv.getContext("2d");
    view.draw(ctx);
    return canv;
  };
  LibraryPane = (function() {
    function LibraryPane(div, librarySizeElement, golApp) {
      this.div = div;
      this.librarySizeElement = librarySizeElement;
      this.golApp = golApp;
      this.key2result = {};
      this.librarySize = 0;
      this.desired_size = [80, 40];
      this._createTable();
      this.name = "";
      this.modified = false;
      this.updateLibrarySize();
      this.updateLibraryName();
    }

    LibraryPane.prototype._createTable = function() {
      var dom, hdr, _i, _len, _ref5;
      dom = new DomBuilder("table");
      dom.a("class", "library-table").tag("thead").tag("tr");
      _ref5 = ["Pattern", "Population", "Period", "Offset", "V", "RLE", "Count", ""];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        hdr = _ref5[_i];
        dom.tag("th").text(hdr).end();
      }
      dom.end().end().tag("tbody").store("library_body");
      this.library_body = dom.vars.library_body;
      return this.div.appendChild(dom.finalize());
    };

    LibraryPane.prototype.put = function(result) {
      var record, rle;
      if (result == null) {
        return;
      }
      rle = Cells.to_rle(result.cells);
      record = {
        result: result,
        count: 1,
        counter: null,
        key: rle
      };
      this._putRecord(record);
      return this.updateLibrarySize();
    };

    LibraryPane.prototype.defaultLibraryForRule = function(rule) {
      var sRule, _ref5;
      sRule = Rules.stringify(rule);
      return (_ref5 = Rule2Name[Rules.stringify(rule)]) != null ? _ref5 : "Default:[" + sRule + "]";
    };

    LibraryPane.prototype.has = function(result) {
      var rle;
      rle = Cells.to_rle(result.cells);
      return rle in this.key2result;
    };

    LibraryPane.prototype.hasDual = function(result, rule) {
      var rle;
      if (result.dx != null) {
        rle = Cells.getDualSpaceship(result.cells, rule, result.dx, result.dy);
        return rle in this.key2result;
      } else {
        return false;
      }
    };

    LibraryPane.prototype._putRecord = function(record) {
      var old_record;
      old_record = this.key2result[record.key];
      this.modified = true;
      if (old_record != null) {
        old_record.count += record.count;
        return this.updateRecord(old_record);
      } else {
        this.key2result[record.key] = record;
        this.addRecord(record);
        return this.librarySize += 1;
      }
    };

    LibraryPane.prototype.updateLibrarySize = function() {
      this.librarySizeElement.innerHTML = "" + this.librarySize;
      return E("library-modified-elem").style.visibility = this.modified ? "visible" : "hidden";
    };

    LibraryPane.prototype.updateLibraryName = function() {
      var name;
      E("library-name").innerHTML = "";
      name = this.name || "[New Library]";
      return E("library-name").appendChild(document.createTextNode(name));
    };

    LibraryPane.prototype.updateRecord = function(record) {
      return record.counter.innerHTML = "" + record.count;
    };

    LibraryPane.prototype.copyRecord = function(rec) {
      return {
        result: rec.result,
        count: rec.count,
        key: rec.key
      };
    };

    LibraryPane.prototype.dumpToStorage = function(storage, name) {
      if (storage == null) {
        throw new Error("No storage");
      }
      storage[name] = this.data2string();
      this.name = name;
      return this.modified = false;
    };

    LibraryPane.prototype.data2string = function() {
      var key, s;
      s = (function() {
        var _results;
        _results = [];
        for (key in this.key2result) {
          _results.push(this.copyRecord(this.key2result[key]));
        }
        return _results;
      }).call(this);
      return JSON.stringify(s);
    };

    LibraryPane.prototype.showStoredData = function() {
      return E("library-json-data").value = this.data2string();
    };

    LibraryPane.prototype.importData = function() {
      var e, elt;
      try {
        elt = E("library-json-data");
        this._importData(JSON.parse(elt.value));
        return elt.value = "";
      } catch (_error) {
        e = _error;
        return alert("Failed to import JSON: " + e);
      }
    };

    LibraryPane.prototype.clear = function() {
      this.key2result = {};
      this.librarySize = 0;
      this.library_body.innerHTML = "";
      this.modified = false;
      this.name = "";
      this.updateLibrarySize();
      return this.updateLibraryName();
    };

    LibraryPane.prototype._importData = function(stored) {
      var rec, _i, _len, _ref5;
      for (_i = 0, _len = stored.length; _i < _len; _i++) {
        rec = stored[_i];
        rec.counter = null;
        if (_ref5 = rec.key, __indexOf.call(this.key2result, _ref5) < 0) {
          this._putRecord(rec);
        }
      }
      this.updateLibrarySize();
      return null;
    };

    LibraryPane.prototype._libraryKey = function(name) {
      return "library-" + name;
    };

    LibraryPane.prototype.load = function(storage, name) {
      if (!((this._libraryKey(name)) in storage)) {
        alert("Library \"" + name + "\" is not present in the storage.");
        return;
      }
      if (this.modified) {
        if (!confirm("Current library has unsaved modifications. Do you want to discard them?")) {
          return;
        }
      }
      this.clear();
      this.name = name;
      this._importData(JSON.parse(storage[this._libraryKey(name)]));
      this.modified = false;
      this.updateLibrarySize();
      return this.updateLibraryName();
    };

    LibraryPane.prototype.save = function(storage, newName) {
      var name;
      if (newName == null) {
        newName = false;
      }
      if ((!newName) && (!this.modified)) {
        return;
      }
      name = this.name;
      if (newName || (name === "")) {
        name = prompt("Please enter library name", this.defaultLibraryForRule(this.golApp.gol.rule));
        if (!name) {
          return;
        }
        if ((this._libraryKey(name)) in storage) {
          if (!confirm("Library " + name + " already exists in the storage. Do you want to overwrite it?")) {
            return;
          }
        }
        this.name = name;
        this.updateLibraryName();
      }
      storage[this._libraryKey(name)] = this.data2string();
      this.modified = false;
      return this.updateLibrarySize();
    };

    LibraryPane.prototype.deleteCurrent = function(storage) {
      if (!this.name) {
        alert("Library is not saved");
        return;
      }
      delete storage[this._libraryKey(this.name)];
      return this.clear();
    };

    LibraryPane.prototype.addRecord = function(record) {
      var canv, dom, makeCanvas, result, v_str, _ref5, _ref6, _ref7,
        _this = this;
      result = record.result;
      makeCanvas = function(imgW, imgH) {
        return makeElement("canvas", [["width", imgW], ["height", imgH]]);
      };
      canv = drawPatternOnCanvas(makeCanvas, result.cells, this.desired_size, [1, 24], 1);
      v_str = result.period != null ? rational2str(Math.max(Math.abs(result.dx), Math.abs(result.dy)), result.period) : "?";
      dom = new DomBuilder("tr");
      dom.CLASS("pattern-report").tag("td").tag("div").CLASS("lib-pattern-background").tag("a").store("aSelect").a("href", "#").a("title", "Click to select pattern").append(canv).end().end().end().tag("td").text(result.cells.length).end().tag("td").text((_ref7 = result.period) != null ? _ref7 : "?").end().tag("td").text("(" + ((_ref5 = result.dx) != null ? _ref5 : "?") + "," + ((_ref6 = result.dy) != null ? _ref6 : "?") + ")").end().tag("td").text(v_str).end().tag("td").tag("div").CLASS("rle-box").text(Cells.to_rle(result.cells)).end().end().tag("td").store("cnt").text(record.count).end().tag("td").tag("a").a("href", "#").CLASS("button").store("closebtn").tag("span").CLASS("icon icon-clearall").a("title", "Remove record").text("X").end().end().end();
      record.counter = dom.vars.cnt;
      dom.vars.closebtn.addEventListener("click", function(e) {
        _this._removeItem(record.key);
        return e.preventDefault();
      });
      dom.vars.aSelect.addEventListener("click", function(e) {
        return _this.golApp.buffer.set(result.cells);
      });
      return this.library_body.insertBefore((record.element = dom.finalize()), null);
    };

    LibraryPane.prototype._removeItem = function(key) {
      var record;
      record = this.key2result[key];
      delete this.key2result[key];
      record.element.parentNode.removeChild(record.element);
      this.librarySize -= 1;
      this.modified = true;
      return this.updateLibrarySize();
    };

    LibraryPane.prototype.filter = function(predicate) {
      var key, to_remove, _i, _len, _results;
      to_remove = [];
      for (key in this.key2result) {
        if (!predicate(this.key2result[key])) {
          to_remove.push(key);
        }
      }
      _results = [];
      for (_i = 0, _len = to_remove.length; _i < _len; _i++) {
        key = to_remove[_i];
        _results.push(this._removeItem(key));
      }
      return _results;
    };

    return LibraryPane;

  })();
  SpaceshipCatcher = (function() {
    function SpaceshipCatcher(on_pattern, max_size, reseed_period) {
      this.on_pattern = on_pattern;
      this.max_size = max_size != null ? max_size : 20;
      this.reseed_period = reseed_period != null ? reseed_period : 300000;
      this.search_area = 1;
      this.spaceships_found = [];
    }

    SpaceshipCatcher.prototype.scan = function(gol) {
      var f, pick, rule, x, y, _i, _j, _k, _l, _ref5, _ref6, _ref7, _ref8, _ref9,
        _this = this;
      f = gol.field;
      rule = gol.rule;
      pick = function(x, y) {
        var fig, x0, y0;
        x0 = gol.snap_below(x);
        y0 = gol.snap_below(y);
        fig = f.pick_pattern_at(x, y, x0, y0, true);
        if (fig.length <= _this.max_size) {
          return _this.on_pattern(fig, rule);
        }
      };
      for (y = _i = 0, _ref5 = this.search_area; _i < _ref5; y = _i += 1) {
        for (x = _j = 0, _ref6 = f.width; _j < _ref6; x = _j += 1) {
          if (f.get(x, y) !== 0) {
            pick(x, y);
          }
        }
      }
      for (y = _k = _ref7 = this.search_area, _ref8 = f.height; _k < _ref8; y = _k += 1) {
        for (x = _l = 0, _ref9 = this.search_area; _l < _ref9; x = _l += 1) {
          if (f.get(x, y) !== 0) {
            pick(x, y);
          }
        }
      }
      return null;
    };

    return SpaceshipCatcher;

  })();
  loadExternalCSS = function(cssHref) {
    var link;
    link = document.createElement("link");
    link.rel = "stylesheet";
    link.type = "text/css";
    link.href = cssHref;
    return document.getElementsByTagName("head")[0].appendChild(link);
  };
  return (function() {
    var btnGroupFeatures, btnGroupTools, btnId, button2panel, fastButton, golApp, panelId, sz;
    if (!document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1")) {
      loadExternalCSS("icons-png.css");
    }
    golApp = new GolApplication([64, 64], "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15", "overlay-container", "canvas", "overlay", "time");
    fastButton = function(id, handler) {
      var e;
      e = E(id);
      e.addEventListener("click", function(e) {
        e.preventDefault();
        if (!golApp.ghost_click_detector.isGhost) {
          return handler(e);
        }
      });
      return e.addEventListener("touchstart", function(e) {
        e.preventDefault();
        golApp.ghost_click_detector.onTouch();
        return handler(e);
      });
    };
    fill_rules([["Billiard Ball Machine", Rules.parse("0;8;4;3;2;5;9;7;1;6;10;11;12;13;14;15", ";")], ["Bounce gas", Rules.parse("0;8;4;3;2;5;9;14; 1;6;10;13;12;11;7;15", ";")], ["HPP Gas", Rules.parse("0;8;4;12;2;10;9; 14;1;6;5;13;3;11;7;15", ";")], ["Rotations", Rules.parse("0;2;8;12;1;10;9; 11;4;6;5;14;3;7;13;15", ";")], ["Rotations II", Rules.parse("0;2;8;12;1;10;9; 13;4;6;5;7;3;14;11;15", ";")], ["Rotations III", Rules.parse("0;4;1;10;8;3;9;11; 2;6;12;14;5;7;13;15", ";")], ["Rotations IV", Rules.parse("0;4;1;12;8;10;6;14; 2;9;5;13;3;11;7;15", ";")], ["Sand", Rules.parse("0;4;8;12;4;12;12;13; 8;12;12;14;12;13;14;15", ";")], ["String Thing", NamedRules.stringThing], ["String Thing II", Rules.parse("0;1;2;12;4;10;6;7;8; 9;5;11;3;13;14;15", ";")], ["Swap On Diag", Rules.parse("0;8;4;12;2;10;6;14; 1;9;5;13;3;11;7;15", ";")], ["Critters", NamedRules.critters], ["Tron", NamedRules.tron], ["Double Rotate", NamedRules.doubleRotate], ["Single Rotate", NamedRules.singleRotate]]);
    fastButton("clear_field", function() {
      return golApp.do_clear();
    });
    fastButton("go-next", function() {
      return golApp.doStep();
    });
    fastButton("go-back", function() {
      return golApp.doReverseStep();
    });
    fastButton("rplay", function() {
      return golApp.startPlayer(-1);
    });
    fastButton("play", function() {
      return golApp.startPlayer(1);
    });
    fastButton("stop", function() {
      return golApp.stopPlayer();
    });
    E("reset-timer").onclick = function() {
      return golApp.reset_time();
    };
    E("set_rule").onclick = function() {
      var rule;
      rule = golApp.set_rule(E("rule").value);
      return selectOption(E("select-rule"), Rules.stringify(golApp.gol.rule), "");
    };
    fastButton("clear-selection", function() {
      return golApp.clear_selection();
    });
    fastButton("clear-nonselection", function() {
      return golApp.clear_nonselection();
    });
    fastButton("selection-random", function() {
      return golApp.random_fill_selection(parseFloat(E("random-fill-percent").value) * 0.01);
    });
    fastButton("selection-analyze", function() {
      return golApp.analyzeSelection();
    });
    E("speed-show-every").onchange = function() {
      return golApp.step_size = parseInt(E("speed-show-every").value);
    };
    E("speed-frame-delay").onchange = function(e) {
      return golApp.setDelay(parseInt(E("speed-frame-delay").value));
    };
    E("select-rule").onchange = function() {
      var rule;
      if ((rule = E("select-rule").value) !== "") {
        golApp.set_rule(rule);
        return E("rule").value = Rules.stringify(golApp.gol.rule);
      }
    };
    E("select-style").onchange = function() {
      var sz;
      sz = parseInt(E("select-style").value, 10);
      return golApp.setCellSize(sz);
    };
    E("show-grid").onchange = function() {
      return golApp.setShowGrid(E("show-grid").checked);
    };
    btnGroupTools = new ButtonGroup(E("btn-group-tools"), "a", "btn-tool-draw");
    btnGroupTools.addEventListener("change", function(e, id) {
      var tool;
      tool = (function() {
        switch (id) {
          case "btn-tool-draw":
            return "draw";
          case "btn-tool-select":
            return "select";
          case "btn-tool-stamp":
            return "stamp";
          case "btn-tool-erase":
            return "eraser";
        }
      })();
      e.preventDefault();
      return golApp.setMouseTool(golApp.mouse_tools[tool]);
    });
    btnGroupFeatures = new ButtonGroup(E("btn-group-features"), "a", "feature-rule-details");
    button2panel = {
      "feature-rule-details": "rule-info-pane",
      "feature-gif-recorder": "gif-recorder-pane",
      "feature-library": "library-pane",
      "feature-settings": "settings-pane"
    };
    for (btnId in button2panel) {
      panelId = button2panel[btnId];
      if (btnId !== "feature-rule-details") {
        E(panelId).style.display = "none";
      }
    }
    btnGroupFeatures.addEventListener("change", function(e, id, oldId) {
      if (oldId !== null) {
        E(button2panel[oldId]).style.display = "none";
      }
      E(button2panel[id]).style.display = "block";
      return e.preventDefault();
    });
    E("gif-start").onclick = nodefault(function() {
      return golApp.start_gif_recorder();
    });
    E("gif-stop").onclick = nodefault(function() {
      return golApp.stopGifRecorder(true);
    });
    E("gif-clear").onclick = nodefault(function() {
      return golApp.gifRecorderClear();
    });
    E("lib-save").onclick = function() {
      return golApp.saveLibrary(false);
    };
    E("lib-save-as").onclick = function() {
      return golApp.saveLibrary(true);
    };
    E("lib-export-json").onclick = function() {
      return golApp.library.showStoredData();
    };
    E("lib-import-json").onclick = function() {
      return golApp.library.importData();
    };
    E("lib-new").onclick = function() {
      return golApp.library.clear();
    };
    E("lib-erase").onclick = function() {
      return golApp.deleteCurrentLibrary();
    };
    E("list-libraries").onchange = function() {
      var e, libName;
      libName = E("list-libraries").value;
      if (libName) {
        try {
          return golApp.library.load(localStorage, libName);
        } catch (_error) {
          e = _error;
          return alert(e);
        }
      }
    };
    E("lib-remove-composites").onclick = function() {
      var e, isnt_composite;
      isnt_composite = function(record) {
        var groups;
        groups = splitPattern(golApp.gol.rule, record.result.cells, record.result.period);
        return groups.length <= 1;
      };
      try {
        return golApp.library.filter(isnt_composite);
      } catch (_error) {
        e = _error;
        return alert("Error:" + e);
      }
    };
    E("lib-load-default").onclick = function() {
      return golApp.library.load(localStorage, golApp.library.defaultLibraryForRule(golApp.gol.rule));
    };
    E("select-size").onchange = function() {
      var cols, e, rows, _ref5;
      try {
        _ref5 = JSON.parse(E("select-size").value), cols = _ref5[0], rows = _ref5[1];
        golApp.setSize(cols, rows);
        return selectOrAddOption(E("select-style"), golApp.view.cell_size);
      } catch (_error) {
        e = _error;
        return null;
      }
    };
    fastButton("toggle-catcher", function() {
      if (golApp.spaceship_catcher !== null) {
        return golApp.disable_spaceship_catcher();
      } else {
        return golApp.enable_spaceship_catcher();
      }
    });
    E("library-json-data").onfocus = E("rle-encoded").onfocus = function() {
      var _this = this;
      return window.setTimeout((function() {
        return _this.select();
      }), 100);
    };
    E("analysis-result-to-library").onclick = function() {
      return golApp.analysisResultToLibrary();
    };
    E("analysis-result-close").onclick = function() {};
    E("analysis-result").onclick = E("analysis-result-close").onclick = function() {
      return E("analysis-result").style.display = "none";
    };
    fastButton("pattern-rotate-cw", function() {
      return golApp.buffer.transform([0, -1, 1, 0]);
    });
    fastButton("pattern-rotate-ccw", function() {
      return golApp.buffer.transform([0, 1, -1, 0]);
    });
    fastButton("pattern-flip-h", function() {
      return golApp.buffer.transform([-1, 0, 0, 1]);
    });
    fastButton("pattern-flip-v", function() {
      return golApp.buffer.transform([1, 0, 0, -1]);
    });
    fastButton("pattern-toggle-phase", function() {
      return golApp.buffer.togglePhase();
    });
    fastButton("pattern-from-selection", function() {
      return golApp.copyToBuffer();
    });
    E("app-create-link").onclick = function() {
      return E("url-output").value = golApp.encode_state_in_url();
    };
    E("url-output").onfocus = function() {
      var _this = this;
      return window.setTimeout((function() {
        return _this.select();
      }), 100);
    };
    golApp.step_size = parseInt(E("speed-show-every").value);
    golApp.step_delay = parseInt(E("speed-frame-delay").value);
    golApp.set_rule(E("select-rule").value);
    golApp.initialize();
    E("rule").value = Rules.stringify(golApp.gol.rule);
    selectOrAddOption(E("speed-show-every"), golApp.step_size);
    selectOrAddOption(E("speed-frame-delay"), golApp.step_delay, "" + golApp.step_delay + "ms");
    sz = golApp.gol.field.size();
    selectOrAddOption(E("select-size"), JSON.stringify(sz), "" + sz[0] + " x " + sz[1]);
    selectOrAddOption(E("select-style"), golApp.view.cell_size);
    E("show-grid").checked = golApp.view.grid_width > 0;
    return golApp.updateLibrariesList();
  })();
}).call(this);

/*
//@ sourceMappingURL=application.map
*/
