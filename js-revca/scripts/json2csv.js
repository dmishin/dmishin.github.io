// Generated by CoffeeScript 1.6.3
var cells, count, data, formatRow, fs, gliderType, infile, key, quote, result, total, _i, _j, _len, _len1, _ref, _ref1;

fs = require("fs");

cells = require("../scripts-src/cells");

infile = process.argv[2];

if (infile == null) {
  process.stderr.write("Input file not specified\n");
  process.exit(1);
}

data = JSON.parse(fs.readFileSync(infile));

quote = function(x) {
  switch (typeof x) {
    case 'number':
      return "" + x;
    case 'string':
      return '"' + x.replace('"', '""') + '"';
    default:
      return "" + x;
  }
};

formatRow = function(data) {
  var i, row, v, _i, _len;
  row = "";
  for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
    v = data[i];
    if (i > 0) {
      row += ", ";
    }
    row += quote(v);
  }
  row += "\n";
  return row;
};

gliderType = function(dx, dy) {
  if (dx === 0 && dy === 0) {
    return "static";
  } else if (dx === 0 || dy === 0) {
    return "orthogonal";
  } else if (Math.abs(dx) === Math.abs(dy)) {
    return "diagonal";
  } else {
    return "slant";
  }
};

total = 0;

for (_i = 0, _len = data.length; _i < _len; _i++) {
  _ref = data[_i], result = _ref.result, count = _ref.count, key = _ref.key;
  total += count;
}

process.stdout.write(formatRow(["rle", "population", "period", "dx", "dy", "speed", "type", "count", "probability"]));

for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
  _ref1 = data[_j], result = _ref1.result, count = _ref1.count, key = _ref1.key;
  process.stdout.write(formatRow([key, result.cells.length, result.period, result.dx, result.dy, Math.max(result.dx, result.dy) / result.period, gliderType(result.dx, result.dy), count, count / total]));
}

/*
//@ sourceMappingURL=json2csv.map
*/
