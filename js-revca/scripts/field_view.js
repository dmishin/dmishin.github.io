// Generated by CoffeeScript 1.6.3
(function(exports) {
  var Array2d, FieldView, MargolusNeighborehoodField, div, mod, _ref, _ref1;
  _ref = this.reversible_ca, MargolusNeighborehoodField = _ref.MargolusNeighborehoodField, Array2d = _ref.Array2d;
  _ref1 = this.math_util, div = _ref1.div, mod = _ref1.mod;
  /*
  Draw a block of field cells on a canvas
  */

  return exports.FieldView = FieldView = (function() {
    function FieldView(field) {
      this.field = field;
      this.cell_colors = ["#888", "#ff0"];
      this.cell_size = 4;
      this.grid_width = 1;
      this.old_field = null;
      this.grid_colors = ["rgb(153,153,153)", "gray"];
    }

    /*
    Return cell index from coordinates
    */


    FieldView.prototype.xy2index = function(x, y) {
      var cs;
      cs = this.cell_size;
      return [div(x, cs), div(y, cs)];
    };

    FieldView.prototype.draw_grid = function(context, x0, y0, x1, y1) {
      var drawGridHrz, drawGridVrt, size, spacing, xmax, xmin, ymax, ymin;
      size = this.cell_size;
      spacing = this.grid_width;
      if (size <= this.grid_width) {
        return;
      }
      xmax = size * x1;
      ymax = size * y1;
      xmin = size * x0;
      ymin = size * y0;
      drawGridVrt = function(xstart, style) {
        var x, _i, _ref2, _results;
        context.fillStyle = style;
        _results = [];
        for (x = _i = xstart, _ref2 = size * 2; _ref2 > 0 ? _i < xmax : _i > xmax; x = _i += _ref2) {
          _results.push(context.fillRect(x, ymin, spacing, ymax - ymin));
        }
        return _results;
      };
      drawGridHrz = function(ystart, style) {
        var y, _i, _ref2, _results;
        context.fillStyle = style;
        _results = [];
        for (y = _i = ystart, _ref2 = size * 2; _ref2 > 0 ? _i < ymax : _i > ymax; y = _i += _ref2) {
          _results.push(context.fillRect(xmin, y, xmax - xmin, spacing));
        }
        return _results;
      };
      drawGridHrz(ymin + size - 1, this.grid_colors[y0 % 2]);
      drawGridVrt(xmin + size - 1, this.grid_colors[x0 % 2]);
      drawGridHrz(ymin + size + size - 1, this.grid_colors[(y0 + 1) % 2]);
      return drawGridVrt(xmin + size + size - 1, this.grid_colors[(x0 + 1) % 2]);
    };

    FieldView.prototype.draw_box = function(context, x0, y0, x1, y1) {
      var data, i, idx, j, old_field, prev_state, size, spacing, state, _i, _j;
      size = this.cell_size;
      spacing = this.grid_width;
      data = this.field.data;
      old_field = this.get_old_field().data;
      prev_state = 255;
      for (i = _i = y0; _i < y1; i = _i += 1) {
        idx = this.field.cell_index(x0, i);
        for (j = _j = x0; _j < x1; j = _j += 1) {
          state = data[idx];
          if (old_field[idx] !== state) {
            if (state !== prev_state) {
              prev_state = state;
              context.fillStyle = this.cell_colors[state];
            }
            context.fillRect(size * j, size * i, size, size);
            old_field[idx] = state;
          }
          idx++;
        }
      }
      if (spacing > 0) {
        return this.draw_grid(context, x0, y0, x1, y1);
      }
    };

    FieldView.prototype.draw = function(context) {
      return this.draw_box(context, 0, 0, this.field.width, this.field.height);
    };

    FieldView.prototype.get_old_field = function() {
      var field, od;
      field = this.field;
      if (!this.old_field || this.old_field.width !== field.width || this.old_field.height !== field.height) {
        od = new Array2d(field.width, field.height);
        od.fill(255);
        this.old_field = od;
        return od;
      } else {
        return this.old_field;
      }
    };

    FieldView.prototype.draw_cell = function(context, x, y, size, state) {
      context.fillStyle = this.cell_colors[state];
      return context.fillRect(x, y, size, size);
    };

    FieldView.prototype.invalidate = function() {
      if (this.old_field) {
        return this.old_field.fill(255);
      }
    };

    return FieldView;

  })();
})(this["field_view"] = {});

/*
//@ sourceMappingURL=field_view.map
*/
